@page "/requests"
@using System
@using System.Collections
@using System.Collections.Generic
@using System.Net
@using System.Threading
@using System.Threading.Tasks
@using blazingwiremock.Client
@using blazing_wiremock.Shared
@using blazing_wiremock.Client;
@using Microsoft.AspNetCore.Blazor
@inject WiremockAdminClient Http;
@implements IDisposable

<h1>
  Get list of requests recieved by the Wiremock Server
  <button class="btn btn-primary float-right" onclick="@PauseToggle">
    @(paused ? "Unpause" : "Pause")
  </button>
</h1>

@if (requests == null)
{
  <p><em>Loading...</em></p>
}
else
{
  <table class="table">
    <thead>
      <tr>
        <th>Time</th>
        <th>Method</th>
        <th>Path</th>
      </tr>
    </thead>
    <tbody>
      @foreach (LogEntryModel request in requests)
      {
        <tr>
          <td>@request.Request.DateTime.ToLongTimeString()</td>
          <td>
            <span class="badge badge-info">@request.Request.Method</span>
          </td>
          <td>@request.Request.Path</td>
        </tr>
      }
    </tbody>
  </table>
}

@functions {
    IList<LogEntryModel> requests;
    Timer timer;
    bool paused = false;

    protected override void OnInit()
    {

      if (timer == null)
      {
        timer = new Timer(new TimerCallback(async _ =>
        {

          requests = await Http.GetRequestsAsync();
          // Note that the following line is necessary because otherwise
          // Blazor would not recognize the state change and not refresh the UI
          this.StateHasChanged();

        }), null, 0, 2000);
      };
    }

    void PauseToggle(UIMouseEventArgs e)
    {
      paused = !paused;
      timer.Change(paused ? 0 : 0, paused? 0 : 2000);
    }

    public void Dispose()
    {
      timer?.Dispose();
    }
}
